//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
  UPLOAD_FILE
  ANONYMUS_USER
}

enum SessionStatus {
  IN_PROGRESS
  COMPLETED
}

enum Roles {
  ADMIN
  CUSTOMER
  ANONYMUS_USER
}

enum UserStatus {
  INVITED
  ACTIVE
}

model Organization {
  uuid         String        @id() @unique() @default(uuid()) @db.Uuid()
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt()
  Themes       Theme[]       @relation("themes")
  Trees        Tree[]
  Assets       Asset[]
  Templates    Template[]
  Users        User[]
  Theme        Theme?        @relation("orgTheme")
  name         String?
  slug         String        @unique()
  homepageUrl  String?
  ClientPortal ClientPortal?
  analyticsKey String?
}

model ClientPortal {
  organizationUuid String       @id() @unique() @db.Uuid()
  Organization     Organization @relation(fields: [organizationUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  Logo             Asset?       @relation("logo", fields: [logoUuid], references: [fileUuid])
  logoUuid         String?      @unique() @db.Uuid()
  logoUrl          String?
  Background       Asset?       @relation("background", fields: [backgroundUuid], references: [fileUuid])
  backgroundUuid   String?      @unique() @db.Uuid()
  backgroundUrl    String?
  Privacy          Asset?       @relation("privacy", fields: [privacyUuid], references: [fileUuid])
  privacyUuid      String?      @unique() @db.Uuid()
  privacyUrl       String?
  Terms            Asset?       @relation("terms", fields: [termsUuid], references: [fileUuid])
  termsUuid        String?      @unique() @db.Uuid()
  termsUrl         String?
}

model Theme {
  uuid             String        @id() @default(uuid()) @db.Uuid()
  name             String
  content          Json
  customCss        String?
  Organization     Organization  @relation("themes", fields: [organizationUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  organizationUuid String        @db.Uuid()
  Tree             Tree[]
  OrgTheme         Organization? @relation("orgTheme", fields: [orgThemeUuid], references: [uuid])
  orgThemeUuid     String?       @unique() @db.Uuid()
}

model Session {
  uuid             String          @id() @default(uuid()) @db.Uuid()
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt()
  name             String
  userLabel        String?
  state            Json            @db.JsonB()
  status           SessionStatus
  ownerUuid        String          @db.Uuid()
  Owner            User            @relation(fields: [ownerUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  treeUuid         String          @db.Uuid()
  Tree             Tree            @relation(fields: [treeUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  GeneratedFile    GeneratedFile[]
  UserUpload       UserUpload[]
  TreeSnapshot     TreeSnapshot?   @relation(fields: [treeSnapshotUuid], references: [uuid])
  treeSnapshotUuid String?         @db.Uuid()
}

model Token {
  id          Int       @id() @default(autoincrement())
  token       String
  type        TokenType
  Owner       User      @relation(fields: [ownerUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  ownerUuid   String    @db.Uuid()
  expires     DateTime
  blacklisted Boolean   @default(false)
}

model User {
  uuid             String       @id() @unique() @default(uuid()) @db.Uuid()
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now()) @updatedAt()
  Tokens           Token[]
  Sessions         Session[]
  Employee         Employee?
  Customer         Customer?
  UserUpload       UserUpload[]
  Organization     Organization @relation(fields: [organizationUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  organizationUuid String       @db.Uuid()
  role             Roles
  status           UserStatus   @default(INVITED)
  Account          Account?
  isBlocked        Boolean      @default(false)
}

model Account {
  termsVersion    Int     @default(0)
  privacyVersion  Int     @default(0)
  email           String
  emailIsVerified Boolean @default(false)
  password        String?
  User            User    @relation(fields: [userUuid], references: [uuid], onUpdate: Cascade, onDelete: Cascade)
  userUuid        String  @id() @unique() @db.Uuid()
}

model Employee {
  User       User    @relation(fields: [userUuid], references: [uuid], onUpdate: Cascade, onDelete: Cascade)
  userUuid   String  @id() @unique() @db.Uuid()
  Trees      Tree[]
  accessCode String?
  firstname  String?
  lastname   String?
}

model Customer {
  User            User       @relation(fields: [userUuid], references: [uuid], onUpdate: Cascade, onDelete: Cascade)
  userUuid        String     @id() @unique() @db.Uuid()
  SoldTrees       SoldTree[]
  referenceNumber String?
  firstname       String?
  lastname        String?
  company         String?
  hasPortalAccess Boolean    @default(false)
}

model File {
  uuid          String         @id() @default(uuid()) @db.Uuid()
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()
  displayName   String
  extension     String
  fileType      String
  Asset         Asset?
  Template      Template?
  GeneratedFile GeneratedFile?
  UserUpload    UserUpload?
}

model Asset {
  Organization                 Organization  @relation(fields: [organizationUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  organizationUuid             String        @db.Uuid()
  File                         File          @relation(fields: [fileUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  fileUuid                     String        @id() @db.Uuid()
  ClientPortalPrivacyAgreement ClientPortal? @relation("privacy")
  ClientPortalTerms            ClientPortal? @relation("terms")
  ClientPortalLogo             ClientPortal? @relation("logo")
  ClientPortalBackground       ClientPortal? @relation("background")
}

model Template {
  Organization     Organization   @relation(fields: [organizationUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  organizationUuid String         @db.Uuid()
  File             File           @relation(fields: [fileUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  fileUuid         String         @id() @db.Uuid()
  Trees            Tree[]
  TreeSnapshots    TreeSnapshot[]
  treeInternalUuid String         @default(uuid()) @db.Uuid()
}

model GeneratedFile {
  Session     Session @relation(fields: [sessionUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  sessionUuid String  @db.Uuid()
  File        File    @relation(fields: [fileUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  fileUuid    String  @id() @db.Uuid()
}

model UserUpload {
  Session     Session @relation(fields: [sessionUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  sessionUuid String  @db.Uuid()
  File        File    @relation(fields: [fileUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  fileUuid    String  @id() @db.Uuid()
  User        User    @relation(fields: [userUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  userUuid    String  @db.Uuid()
}

model Tree {
  uuid             String         @id() @unique() @default(uuid()) @db.Uuid()
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt()
  name             String
  description      String?
  document         Bytes?
  Snapshots        TreeSnapshot[]
  Sessions         Session[]
  Organization     Organization   @relation(fields: [organizationUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  organizationUuid String         @db.Uuid()
  Template         Template[]
  SoldTrees        SoldTree[]
  Employee         Employee[]
  Theme            Theme?         @relation(fields: [themeUuid], references: [uuid])
  themeUuid        String?        @db.Uuid()
  isPublic         Boolean?
}

model TreeSnapshot {
  uuid           String     @id() @default(uuid()) @db.Uuid()
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt()
  document       Bytes?
  OriginTree     Tree       @relation(fields: [originTreeUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  originTreeUuid String     @db.Uuid()
  Sessions       Session[]
  Template       Template[]
}

model SoldTree {
  Tree             Tree     @relation(fields: [treeUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  treeUuid         String   @db.Uuid()
  credits          Int?
  Customer         Customer @relation(fields: [customerUserUuid], references: [userUuid], onDelete: Cascade, onUpdate: Cascade)
  customerUserUuid String   @db.Uuid()

  @@unique([treeUuid, customerUserUuid])
}
